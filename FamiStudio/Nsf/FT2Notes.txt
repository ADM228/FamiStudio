Encoding FT2 stock:

	$00            Stop note
	$01-$7f        Note (n << 1) | e   Note n (e = 1 if note -> empty -> note, 0 otherwise) (GET RID OF THIS!)
	$80 | (n << 1) Instrument change, max 64
	$81 | (n << 1) Series of n empty notes (max 60 because 61 = $fb, 62 = $fd)
	$f9            Repeat (3c)
	$fb            Speed change (3d)
	$fd            Jump (3e)
	$ff, n, ref    Plays n notes starting at ref
	
New encoding:
	
	$00            Stop note
	$01-$60        Notes (like doug)
	$61            Auto slide note (followed by step size + num steps (255 = manual slide) + target note)
	$62            Disable attack (can only happen when no instrument changes)
	$63            Override pitch envelope (for vibrato)
	$64            Clear pitch override flag.
	$65            TODO: fine pitch.
	$66-$6f        Free.
	$70-$7f        Volume (like doug).
	$80 | (n << 1) Instrument change, max 64
	$81 | (n << 1) Series of n empty notes (max 59 = $f7, 60 = $f9, 61 = $fb, 62 = $fd)
	$f9            Release note (3b)
	$fb            Speed change (3d)
	$fd            Jump (3e)
	$ff, n, ref    Plays n notes starting at ref

New new encoding idea (need to look at real data):

	0x00 - 0x61 : Notes 
	0x62 - 0x6f : Rare commands (jumps, refs, etc.)
	0x70 - 0x7f : Volume
	0x80 - 0xff : Bits + [payload of of N bytes depending of bits sets]
		0x40 = Instrument change
		0x20 = Has attack -> instrument change must have this too, silly
		0x10 = Has pitch override (add extra byte to say if need to clear flag or not)
		0x08 = Has slide data 
		0x04 = Has empty notes
		0x02 = Has speed change
		0x01 = Has fine pitch

Typical sequences in Shovel Knight:

	; Intro, lots of volume.
	$80,$0f,$a5, (Instrument + note + empty notes)
	$82,$1b,$91, (Instrument + note + empty notes)
	$22,$89,$f7,$85, (Note + empty + release + empty)
	$20,$87,$7c,$93,$7a,$85,$79,$93,$78,$97 (note + empty + volume + empty + volume + ...)

	; More typical.	
	$25,$8f,$00, (Note + empty + stop)
	$9c,$3f,$8f,$00, (instrument + note + empty + stop)
	$84,$20,$8f,$00,
	$26,$8f,$00, (note + empty + stop)
	$26,$8f,$00,
	$9c,$3f,$8f,$00,
	$84,$27,$8f,$00
	
	; Some use of new features.
	$62,$1b,$85 (no attach + note + empty)
	$2e,$89,$f7,$85 (note + empty + release + empty)
	$33,$91 (note + empty)
	$3a,$89,$f7,$85 (note + empty + release + empty)
	$38,$99 (note + empty)
	$63,<(@env22),>(@env22),$8d,$f7,$63,<(@env15),>(@env15),$64  (override pitch, empty, release, override + cancel override)

Effects doug added in FT3/4/5:
- 1xy/2xy      Slide up/down, useful since our pitch env are absolute. Good substitude for lack of HW sweep. DuckTables and JTS could have used that.
- 3xx          Partamento, useful, but wait until i see a game that uses it.
- 4xy          Vibrato, not needed, less accurate as an FX too.
- Qxy/Rxy      Similar to slide up, but stops after semitones. Portamento seems more general since it can do more than 15 steps. Which one is cheaper?

